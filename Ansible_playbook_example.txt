Ansible Modules

Command to check syntax of playbook:
ansible-playbook your_playbook.yml --syntax-check

command dry run your playbook:
ansible-playbook your_playbook.yml --check

command To run playbook on nodes:
ansible-playbook your_playbook.yml

modules types: copy module, file module, loop module, service module, package modules, script modules, command modules,

examples of modules in playbook playbook:
-------------------------------------------------------------------------------------------------------------------
Task 1. create, copy file /directory & change ownership & permission of file.

---
- name: working with copy & file files                 #play name
  hosts: all                                           #nodes
  become: yes                                          #work with root privelages
  tasks:                                         
   - name: copy file                                  #first task name
     copy:                                            #module
       src: /home/ubuntu/ansible_repo/testfile.txt    #source path
       dest: /media/                                  #destination path
       owner: ubuntu                                  #change file ownership
       group: ubuntu                                  #change group ownership
       mode: u-x,g-wx,o-wx                            #set permission, also use octal no
       backup: true                                   #backup

   - name: creating a file
     file:
      path: /media/newfile.txt
      state: touch

   - name: creating a directory
     file:
      path: /media/test_dir
      state: directory     
      #state: absent                                      #delete directory/file  

   - name: change permssion & ownership
     file:
      path: /media/newfile.txt
      owner: ubuntu
      group: ubuntu
      mode: 0555                                          #permissions

...

---------------------------------------------------------------------------------------------------------------------------
task2: install apache2 on nodes ----(package & Service modules are used)
---
- name: modules practice playbook
  hosts: all
  become: yes                                            #command to run task with root prevelleges
  tasks:
    - name: print msg                                   #script to pring msg msg
      debug:
        msg: "hello world"
    - name: Update apt package cache                    # script to apt update  
      apt:
        update_cache: yes
    - name: install apache2                             # script to install packages
      apt:
        name: apache2
        state: present
    - name: ensure apache2 started & enabled           #script to start & enable service
      service:
        name: apache2 
        state: started  
        enabled: yes
    - name: stop apache2                               #Script to stop service
      service:
       name: apache2
       state: stopped
       enabled: no
    - name: restart apache2                           #Script to restart service
      service:
       name: apache2
       state: restarted
       enabled: yes
    - name: remove apache2                            #script to remove service
      apt:
       name: apache2
       state: absent 
...

--------------------------------------------------------------------------------------------------------------------------------------
task3: create cron job to create a file [ module: cron]
---
- name: cron job to create file
  hosts: all
  tasks:
  - name: add cron job
    cron:
     name: create cronfile.txt
     minute: 52
     hour: 16
     day: 8
     month: 3
     weekday: 5
     user: ubuntu 
     job: /media/cronfile.txt
     #state: present                                              #create file
     #disabled: yes                                                 #disable file temperory
     state: absent                                                  #to delete cronjob

...
#check with command crontab-l  at nodes
--------------------------------------------------------------------------------------------------------------------------------
task4: create user & set password [module: user]
# playbook to create user
---
- name: user creation & management
  hosts: all
  become: yes
  tasks:
   - name: create user & add into group & delete
     user:
      name: chetan
      comment: creating chetan user
      #home: <path>                    #default home dir is /home/chetan , add path if want to give specifc home dir
      shell: /bin/bash                #default shell       check with  #id chetan or #ls -l /home --user created
      #group: evc                       #add in single group
      #groups: anant, tata              #add in multiple group 
      #state: absent                     #delete user 
      #remove: yes                       # delete all user data like home directory 
...
#Playbook to set password to user:
---
- name: set password to user
  hosts: all
  become: yes
  tasks:
   - name: set password to chetan user
     user:
      name: chetan
      update_password: always              #update password to existing user
      #update_password: on_create          #use while creating user
      password: "{{'chetan123' | password_hash ('sha512')}}"
...
-----------------------------------------------------------------------------------------------------------------------------------------
task5: install /start /enable nginx   [module: apt for ubuntu/yum for redhat , service]

---
- name: nginx installation 
  hosts: all
  become: yes
  tasks:
   - name: apt update
     apt:
      update_cache: yes

   - name: install iginx
     apt: 
      name: nginx
      state: present
   - name: start & enable nginx service
     service:
       name: nginx
       state: started
       enabled: yes

...  
----------------------------------------------------------------------------------------------------------------
task6: kill already installed nginx service [module: shell] 

---
- name: kill/ stop already installed nginx service        #pgrep nginx-----to check pid of service run on node
  hosts: all
  become: yes
  tasks:
   - name: kill nginx service
     ignore_errors: yes                                  #it ignore error if any while stopping process
     shell: "pgrep nginx | xargs kill"                   # module: shell & command to kill process
...  

------------------------------------------------------------------------------------------------------------------
task7: download css temple /file from internet [module: get_url]

---
- name: download css templete from internet
  hosts: all
  become: yes
  tasks:
   - name: download css templete
     get_url:                          #module
       url: https://www.free-css.com/assets/files/free-css-templates/download/page296/oxer.zip
       dest: /media/
       #owner: chetan              # change ownership of file
       #group: anant                #change group
       #mode: 0644                   #permissions
...

-------------------------------------------------------------------------------------------------------------------

